#!/bin/bash -ex

fatal() { echo -e "FATAL: $*" >&2; exit 1; }

if [[ -n "$HOSTNAME" ]]; then
    APPNAME=$HOSTNAME
    [[ "$APPNAME" == "rails" ]] && APPNAME=railsapp # avoid namespace conflict
else
    echo "'$(basename $0)' error: hostname not defined"
    exit 1
fi

DB_USER=$APPNAME
DB_PASS=$(mcookie)
WEBROOT=/var/www/$APPNAME
LOGSDIR=/var/log/$APPNAME

[[ "$FAB_HTTP_PROXY" ]] && export http_proxy=$FAB_HTTP_PROXY
export GEMOPTS="--no-document"
export MAKE_OPTS="-j$(nproc)"
export RUBY_CONFIGURE_OPTS=--disable-install-doc

git clone https://github.com/rbenv/rbenv.git /usr/local/rbenv --depth=1
git clone https://github.com/rbenv/ruby-build.git /usr/local/rbenv/plugins/ruby-build --depth=1
/usr/local/rbenv/plugins/ruby-build/install.sh

# configuration for rbenv
cat << 'EOF' >> /root/.bashrc.d/rbenv
export RBENV_ROOT=/usr/local/rbenv
export PATH="$RBENV_ROOT/bin:$PATH"
eval "$(rbenv init -)"
EOF
# source rbenv.conf into shell
chmod +x /root/.bashrc.d/rbenv
. /root/.bashrc.d/rbenv

mkdir -p /usr/local/rbenv/rbenv.d/rehash
cat << 'EOF' >> /usr/local/rbenv/rbenv.d/rehash/gem-symlinks.bash
#!/bin/bash

SHIM_PATH='/usr/local/rbenv/shims'

for shim in ${SHIM_PATH}/*; do
    ln -sf "${shim}" "/usr/local/bin/$( basename ${shim} )"
done
EOF

chmod +x /usr/local/rbenv/rbenv.d/rehash/gem-symlinks.bash

RUBY_VERSIONS=$(sort -V <<<$(sed -En "s|^([0-9.]+)|\1|p" <<<$(rbenv install --list)))

if [[ -n "$RBY_VER" ]]; then
    RBY_VER_INSTALL=$(grep "$RBY_VER" <<<"$RUBY_VERSIONS")
else
    RBY_VER_INSTALL=$(tail -1 <<<"$RUBY_VERSIONS")
    echo "RBY_VER not set - falling back to latest stable Ruby: $RBY_VER_INSTALL"
fi
if [[ -z "$RBY_VER_INSTALL" ]]; then
    # this should only occur if RBY_VER is set and is unavailable
    RUBY_VERSIONS=$(sed 's|.\{2\}$||g' <<<"$RUBY_VERSIONS")
    fatal "RBY_VER: $RBY_VER unsupported; supported versions are:\n$RUBY_VERSIONS"
else
    echo "Installing Ruby version: $RBY_VER_INSTALL"
fi

rbenv install "$RBY_VER_INSTALL"
rbenv global "$RBY_VER_INSTALL"

gem update --system

gem install "$GEMOPTS" rack
gem install "$GEMOPTS" rails
gem install "$GEMOPTS" passenger
gem install "$GEMOPTS" rake
gem install "$GEMOPTS" bundler --force
gem install "$GEMOPTS" mysql2 -- --with-mysql-config='/usr/bin/mysql_config'
gem install "$GEMOPTS" execjs

rbenv rehash

# build and configure passenger
passenger-install-apache2-module --auto
PASSENGER_ROOT=$(echo $(ls -d /usr/local/rbenv/versions/*/lib/ruby/gems/*/gems/passenger*))
sed -i "s|PASSENGER_ROOT|$PASSENGER_ROOT|g" /etc/apache2/mods-available/passenger.*

# convenience execution variable
MYSQL_BATCH="mysql --batch"

# start mysql server
systemctl start mariadb

# create databases for each environment
for DB_ENV in test development production; do
    DB_NAME=${APPNAME}_${DB_ENV}
    mysqladmin create $DB_NAME;
    $MYSQL_BATCH --execute "grant all privileges on $DB_NAME.* to $DB_USER@localhost identified by '$DB_PASS'; flush privileges;"
done

# seed rails application (3.x requires new)
cd /var/www
rails new $APPNAME -d mysql --skip

unset http_proxy

CONF=$WEBROOT/config/database.yml
sed -i "s|username:.*|username: $DB_USER|g" $CONF
sed -i "s|password:.*|password: $DB_PASS|g" $CONF

# move logs to proper place
touch $WEBROOT/log/production.log
mv $WEBROOT/log $LOGSDIR
ln -s $LOGSDIR $WEBROOT/log

# configure permissions
chown -R root:www-data $WEBROOT
chown -R www-data:www-data $WEBROOT/tmp
chown -R www-data:www-data $LOGSDIR

# apache configuration
a2enmod rewrite
a2enmod proxy_balancer
a2enmod proxy_http
a2enmod proxy
a2enmod headers
a2enmod passenger
a2enmod evasive
a2enmod security2

a2dissite 000-default

mv /etc/apache2/conf/rails.conf /etc/apache2/conf/$APPNAME.conf
sed -i "s|@APPNAME@|$APPNAME|g" /etc/apache2/conf/$APPNAME.conf

mv /etc/apache2/sites-available/rails.conf /etc/apache2/sites-available/$APPNAME.conf
sed -i "s|@APPNAME@|$APPNAME|g" /etc/apache2/sites-available/$APPNAME.conf

mv /etc/logrotate.d/rails /etc/logrotate.d/$APPNAME
sed -i "s|@APPNAME@|$APPNAME|g" /etc/logrotate.d/$APPNAME

a2ensite $APPNAME

# stop mysql server
systemctl stop mariadb
