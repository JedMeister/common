#!/bin/bash -e

# create apt sources
# environment variables:
#   - RELEASE <required>:
#       - OS distro and codename to use (e.g. 'debian/bookworm')
#   - NONFREE <optional>:
#       - set to enable non-free by default
#   - TKL_TESTING <optional>:
#       - set to enable the TUrnKey testing repo
#   - BACKPORTS <optional>:
#       - set to enable Debian backports repo
#   - PHP_VERSION <optional>:
#       - set to desired PHP version from Sury PHP repo
#   - PHP_EXTRA_PINS <optional>:
#       - space separated list of additional Sury php pkgs to pin 500
#   - DOCKER <optional>:
#       - set to prepare docker apt repo in bootstrap and enable docker
#         support in root.patched
#   - APT_PROXY_OVERRIDE <optional>:
#       - override proxy default proxy; use one of:
#           - full remote url (starting with 'http/s')
#           - port number (for localhost proxy)
#           - 'disable' (disable proxy)
#   - HOST_DEB_VER <optional>:
#       - if not the same as guest, apply relevant transition changes
#   - NO_TURNKEY_APT_REPO <optional>:
#       - disable TurnKey apt repos - useful during early transition

# Note, to install packages from backports:
# - set 'BACKPORTS=y'; and either:
#   - add to plan & pin package(s) to backports (via prefs file); or
#   - install via apt using '-t $CODENAME-backports' switch

fatal() {
    echo "fatal: $@" 1>&2
    exit 1
}

[ ! -f /turnkey-buildenv ] || source /turnkey-buildenv
[ -n "$RELEASE" ] || fatal "RELEASE is not set"
CODENAME=$(basename $RELEASE)
rm -rf /turnkey-buildenv

SOURCES_LIST=/etc/apt/sources.list.d
PREFS_LIST=/etc/apt/preferences.d
CONF_DIR=/etc/apt/apt.conf.d
mkdir -p $SOURCES_LIST $PREFS_LIST $CONF_DIR

# transition - add specific Debian base transition changes here
deb_ver=$(sed -nE "s|^([0-9]+).*|\1|p" /etc/debian_version)
[[ -n "$HOST_DEB_VER" ]] || HOST_DEB_VER=$deb_ver
if [[ "$HOST_DEB_VER" != "$deb_ver" ]]; then
    echo "# Transition build detected - building v$deb_ver on v$HOST_DEB_VER"
    if [[ $HOST_DEB_VER -ne $((deb_ver - 1)) ]]; then
        fatal "Detected more than one Debian major version difference"
    elif [[ $deb_ver -lt 9 ]]; then
        fatal "Debian releases older than Stretch no longer supported"
    fi
fi
if [[ $deb_ver -le 10 ]]; then
    sec_repo="$CODENAME/updates"
    PROXY_PORT=8124
elif [[ $deb_ver -ge 11 ]]; then
    sec_repo="$CODENAME-security"
    PROXY_PORT=3128
fi

if [[ "${APT_PROXY_OVERRIDE,,}" -eq "disable" ]]; then
    PROXY_PORT=
elif [[ -n $APT_PROXY_OVERRIDE ]]; then
    PROXY_PORT=$APT_PROXY_OVERRIDE
fi

if [[ -n $PROXY_PORT ]]; then
    # Configure apt proxy
    cat > $CONF_DIR/01proxy <<EOF
Acquire::http::proxy "http://127.0.0.1:$PROXY_PORT";
Acquire::https::proxy "http://127.0.0.1:$PROXY_PORT";
EOF
fi

# update CA certs (custom cacher cert should already have been added)
if [[ -e /usr/local/share/ca-certificates/squid_proxyCA.crt ]]; then
    update-ca-certificates
elif [[ $deb_ver -le 10 ]]; then
    echo "Buster base (or earlier) detected, skipping importing Squid CA cert."
else
    fatal "Squid CA cert not found."
fi

# Set default Debian PHP version
DEBIAN_PHP_V=$(apt-cache policy php \
                | sed -n "\|Candidate:|s|.*:\([0-9]\.[0-9]*\)+.*|\1|p")

if [[ -z "$NO_TURNKEY_APT_REPO" ]]; then
    # keys are provided as ascii armoured for transparency; but secure apt requires
    # gpg keyring files
    key_dir=/usr/share/keyrings
    repos=(main security testing)
    for repo in ${repos[@]}; do
        full_path=$key_dir/tkl-$CODENAME-$repo
        keyring=$full_path.gpg
        keyfile=$full_path.asc
        gpg --no-default-keyring --keyring $keyring --import $keyfile
        rm $keyfile
    done
    # ensure that gpg-agent is killed after processing keys
    kill -9 $(pidof gpg-agent) || true
    rm -rf $HOME/.gnupg
fi

cat > $SOURCES_LIST/sources.list <<EOF
deb [signed-by=$key_dir/tkl-$CODENAME-main.gpg] http://archive.turnkeylinux.org/debian $CODENAME main

deb http://deb.debian.org/debian $CODENAME main
deb http://deb.debian.org/debian $CODENAME contrib
#deb http://deb.debian.org/debian $CODENAME non-free
EOF

cat > $SOURCES_LIST/security.sources.list <<EOF
deb [signed-by=$key_dir/tkl-$CODENAME-security.gpg] http://archive.turnkeylinux.org/debian $CODENAME-security main

deb http://security.debian.org $sec_repo main
deb http://security.debian.org $sec_repo contrib
#deb http://security.debian.org $sec_repo non-free
EOF

TKL_TESTING_LIST=$SOURCES_LIST/turnkey-testing.list
cat > $TKL_TESTING_LIST.disabled <<EOF
deb [signed-by=$key_dir/tkl-$CODENAME-testing.gpg] http://archive.turnkeylinux.org/debian $CODENAME-testing main
EOF

DEB_BACKPORT_LIST=$SOURCES_LIST/debian-backports.list
cat > $DEB_BACKPORT_LIST.disabled <<EOF
deb http://deb.debian.org/debian $CODENAME-backports main
#deb http://deb.debian.org/debian $CODENAME-backports non-free
EOF

if [[ -n "$NO_TURNKEY_APT_REPO" ]]; then
    find $SOURCES_LIST -type f -exec sed -i '/archive.turnkeylinux.org/ s/^/#/g' {} \;
fi

if [ -n "$PHP_VERSION" ] || [ -n "$DOCKER" ]; then
    # ensure support for https repo & wget (to download gpg key)
    PKGS="lsb-release ca-certificates wget"
    apt-get update --allow-releaseinfo-change
    DEBIAN_FRONTEND=noninteractive apt-get install -y $PKGS
fi
if [ -n "$PHP_VERSION" ]; then
    # download keyfile
    keyfile=/usr/share/keyrings/php-sury.org.gpg
    wget -O $keyfile https://packages.sury.org/php/apt.gpg

    cat > $SOURCES_LIST/php.list <<EOF
# DEB.SURY.ORG repo for php

deb [signed-by=$keyfile] https://packages.sury.org/php/ $CODENAME main
EOF

    cat > /etc/apt/preferences.d/php-sury.pref <<EOF
Package: *
Pin: origin packages.sury.org
Pin-Priority: 10

Package: php${PHP_VERSION}-*
Pin: origin packages.sury.org
Pin-Priority: 550

Package: libapache2-mod-php${PHP_VERSION}
Pin: origin packages.sury.org
Pin-Priority: 550

Package: php-pear
Pin: origin packages.sury.org
Pin-Priority: 550

Package: php-imagick
Pin: origin packages.sury.org
Pin-Priority: 550

Package: libpcre3
Pin: origin packages.sury.org
Pin-Priority: 550

Package: libzip4
Pin: origin packages.sury.org
Pin-Priority: 550

Package: php-common
Pin: origin packages.sury.org
Pin-Priority: 550

Package: libpcre2-8-0
Pin: origin packages.sury.org
Pin-Priority: 550

Package: libgd3
Pin: origin packages.sury.org
Pin-Priority: 550

# only enable below if using latest php version
#Package: php-imagick
#Pin: origin packages.sury.org
#Pin-Priority: 550

#Package: php-redis
#Pin: origin packages.sury.org
#Pin-Priority: 550

#Package: php-igbinary
#Pin: origin packages.sury.org
#Pin-Priority: 550

EOF
    # dynamically add some extra pins as specified in appliance Makefile
    for package_name in $PHP_EXTRA_PINS; do
        if grep -q "^Package: $package_name\$" /etc/apt/preferences.d/php-sury.pref; then
            continue
        fi
        cat >> /etc/apt/preferences.d/php-sury.pref <<EOF
Package: $package_name
Pin: origin packages.sury.org
Pin-Priority: 550

EOF
    done

    # create php-mysql package that depends on PHP_VERSION - this allows adminer to install cleanly
    PKG=php-mysql
    mkdir -p /tmp/$PKG/DEBIAN
    PKG_V="2:${PHP_VERSION}"
    cd  /tmp
    cat > /tmp/$PKG/DEBIAN/control <<EOF
Package: php-mysql
Version: $PKG_V
Section: custom
Priority: optional
Architecture: all
Essential: no
Depends: php${PHP_VERSION}-mysql
Installed-Size: 1024
Maintainer: Jeremy Davis <jeremy@turnkeylinux.org>
Description: Dummy Package to allow Adminer to install cleanly without Debian php-mysql package.
EOF
    apt-get update
    dpkg-deb --build ${PKG}
    DEBIAN_FRONTEND=noninteractive apt-get install ./${PKG}.deb -y --allow-downgrades --autoremove
    apt-mark hold php-mysql="${PKG_V}"
    cd -
    rm -rf /tmp/${PKG}*
fi

if [ "$NONFREE" ]; then
    sed -i "/non-free/ s|^#||" $SOURCES_LIST/sources.list
    sed -i "/non-free/ s|^#||" $SOURCES_LIST/security.sources.list
fi

if [ "$TKL_TESTING" ]; then
    mv $TKL_TESTING_LIST.disabled $TKL_TESTING_LIST
fi

if [ "$BACKPORTS" ]; then
    mv $DEB_BACKPORT_LIST.disabled $DEB_BACKPORT_LIST
    if [ "$BACKPORTS_NONFREE" ]; then
        sed -i "/non-free/ s|^#||" $DEB_BACKPORT_LIST
    fi

    # dynamically add some extra pins as specified in appliance Makefile
    [[ -n "$BACKPORTS_PINS" ]] || fatal "BACKPORTS env var set but no BACKPORTS_PINS specified"
    for package_name in $BACKPORTS_PINS; do
        cat >> /etc/apt/preferences.d/debian-backports.pref <<EOF
Package: $package_name
Pin: release a=$CODENAME-backports
Pin-Priority: 500

EOF
    done
fi

# This hack ensures that any changes to 'Suite' and 'Version' changes are
# accepted and don't interupt install
apt-get update --allow-releaseinfo-change
# no idea why but build fails saying this dir doesn't exist if I don't do this
mkdir -p /var/cache/apt/archives
